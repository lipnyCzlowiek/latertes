---
layout: post
title:  "Znaczenie stosowania poprawnego nazewnictwa w programowaniu"
date:   2019-07-05 18:52:08 +0100
categories: programowanie
---
## Wstęp
Nie ma nic gorszego niż głowienie się nad źle napisanym kodem, gdzie nazwy zmiennych i funkcji są nietrafne, skrótowe, bądź wyglądają jak losowe ciągi znaków. Ciężko jest przecenić ten aspekt naszej pracy a mimo to tak niewielu developerów poświęca należytą uwagę poprawnemu nazewnictwu. Każdy programista, który traktuje swoją pracę poważnie, powinien poznać podstawowe zasady pisania czystego i zrozumiałego kodu. Wbrew pozorom, nie potrzeba dużych nakładów czasu i praktyki aby znacząco podnieść jakość naszej pracy. W tym wpisie postaram się przybliżyć fundamentalne reguły dotyczące porawnego nazewnictwa w programowaniu. Główną inspiracją dla tego posta jest książka *Czysty Kod* autostwa Roberta Martina a poniższe akapity po krótce przedstawiają najważniejsze punkty wyciągniete z jej lektury.

### Samodokumentujący się kod
Jeśli potrzeba postawić komentarz przy nazwie zmiennej bądź funkcji to (na ogół) znaczy to, że coś poszło nie tak w procesie jej deklarowania. Nazwy powinny być opisowe i jasno przedstawiać przeznaczenie danego tokenu. Niech zmienne informują o ich przeznaczeniu a funkcje o efekcie ich działania.

Źle:
```
let dip; // Number of days in current period
```
Dobrze:
```
let daysInPeriod;
```

### Krócej nie znaczy lepiej
Dni kiedy trzeba było oszczędzać bajty na długościach nazw są daleko za nami. Nie bójmy się stosowania dłuższych nazw, ponieważ czas i frustracja zaoszczędzona sobie (oraz innym) podczas późniejszego powrotu do kodu jest warta tych kilku dodatkowych uderzeń w klawisze klawiatury. Dłuższe nazwy są również dużo prostsze do wyszukania w kodzie.

Źle:
```
function mkUsrAcc() { ... }
```
Dobrze:
```
function makeNewUserAccount() { ... }
```

### Nazwy są dla ludzi
Jeśli nazywasz zmienne w stylu *const accmgrpl = ...* to równie dobrze możesz rzucić web dev i zająć się pisaniem czystego kodu maszynowego. Staraj się używać nazw które da się łatwo wymówić. Może ta porada wydaje się dziwna ale jak opisuje to Robert Martin, ułatwi Ci to współpracę z innymi programistami, jeśli nadejdzie potrzeba omówienia działania fragmentu twojego kodu.

Źle:
```
let vdUsr1stLTs; // Variable holding first login timestamp for user
```
Dobrze:
```
let firstLoginTimestamp;
```

### Leksykon bazowy
Od samego początku pisania kodu zdecyduj się na konkretne nazwy dla różnych pojęć i staraj się ich trzymać. Przykładowo, jeśli klasa A definiuje metodę *getPosts* do pobierania postów z bazy dancych to do pobierania komentarzy również zastosuj przedrostek get a nie np. fetch albo retrieve.

Źle:
```
function getPosts() { ... }
function fetchComments() { ... }
function retrieveTags() { ... }
```
Dobrze:
```
function getPosts() { ... }
function getComments() { ... }
function getTags() { ... }
```

>Seria postów pod tytułem *XXX* to esencja moich notatek i wniosków wyciągniętych z lektury wspaniałej książki *Czysty Kod. Podręcznik dobrego programisty* autorstwa Roberta Martina. Kliknij [tutaj](http://www.sampleurl.com) aby zobaczyć wszystkie wpisy z tej kolekcji.
